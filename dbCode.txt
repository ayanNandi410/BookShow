    with app.app_context():
        db.drop_all()
        db.create_all()
        db.session.add(Venue(name='Inox Highland Park',place='Dharmatala, Kolkata',capacity=320))
        db.session.add(Venue(name='Inox Rangoli Mall',place='Belur, Howrah',capacity=540))
        db.session.add(Venue(name='Inox Forum Mall',place='Rabindra Sadan, Kolkata',capacity=340))
        db.session.add(Venue(name='Inox RD Mall',place='Liluah, Howrah',capacity=200))

        amq = Show(name='Ant Man: Quantamania',rating=3,ticketPrice=234)
        amw = Show(name='Ant Man and the Wasp',rating=2,ticketPrice=334)
        mr = Show(name='Mishhor Rahasya',rating=4,ticketPrice=400)
        pt = Show(name='Pathaan',rating=1,ticketPrice=134)

        action = Tag(name='Action')
        thriller = Tag(name='Thriller')

        amq.tags.append(action)
        amq.tags.append(thriller)
        amw.tags.append(action)
        mr.tags.append(action)
        pt.tags.append(action)
        pt.tags.append(thriller)

        db.session.add(amq)
        db.session.add(amw)
        db.session.add(mr)
        db.session.add(pt)

        db.session.add(action)
        db.session.add(thriller)

        db.session.add(User(name='admin',email='admin@gmail.com',password=generate_password_hash('admin123', method='sha256'),access=1))
        db.session.commit()


        with app.app_context():
        db.drop_all()
        db.create_all()

        inoxHighland = Venue(name='Inox Highland Park',img_name='IHP',description='Again 1 of the Topmost Multiplex in Kolkata. As I am a Movie Buff, watching 4-5 Movies in a month, there is hardly any Good Multiplex or Cinema Hall in Central Kolkata and nearby, where I haven`t been.',location='Dharmatala, Kolkata',capacity=320)
        inoxRangoli = Venue(name='Inox Rangoli Mall',img_name='IRM',description='Again 1 of the Topmost Multiplex in Kolkata. As I am a Movie Buff, watching 4-5 Movies in a month, there is hardly any Good Multiplex or Cinema Hall in Central Kolkata and nearby, where I haven`t been.',location='Belur, Howrah',capacity=540)
        inoxForum = Venue(name='Inox Forum Mall',img_name='IFM',description='Again 1 of the Topmost Multiplex in Kolkata. As I am a Movie Buff, watching 4-5 Movies in a month, there is hardly any Good Multiplex or Cinema Hall in Central Kolkata and nearby, where I haven`t been.',location='Rabindra Sadan, Kolkata',capacity=340)
        inoxRD = Venue(name='Inox RD Mall',img_name='IRDM',description='Again 1 of the Topmost Multiplex in Kolkata. As I am a Movie Buff, watching 4-5 Movies in a month, there is hardly any Good Multiplex or Cinema Hall in Central Kolkata and nearby, where I haven`t been.',location='Liluah, Howrah',capacity=200)


        amq = Show(name='Ant Man: Quantamania',img_name='AMQ',rating=3,ticketPrice=234)
        amw = Show(name='Ant Man and the Wasp',img_name='ANW',rating=2,ticketPrice=334)
        mr = Show(name='Mishhor Rahasya',img_name='MR',rating=4,ticketPrice=400)
        pt = Show(name='Pathaan',img_name='PT',rating=1,ticketPrice=134)

        action = Tag(name='Action')
        thriller = Tag(name='Thriller')
        drama = Tag(name='Drama')
        fantasy = Tag(name='Fantasy')
        horror = Tag(name='Horror')
        mystery = Tag(name='Mystery')

        amq.tags.append(action)
        amq.tags.append(fantasy)
        amw.tags.append(mystery)
        mr.tags.append(drama)
        pt.tags.append(horror)
        pt.tags.append(thriller)

        inoxHighland.avShows.append(amq)
        inoxHighland.avShows.append(amw)
        inoxRangoli.avShows.append(mr)
        inoxRangoli.avShows.append(pt)
        inoxForum.avShows.append(amq)
        inoxForum.avShows.append(pt)
        inoxRD.avShows.append(amw)
        inoxRD.avShows.append(pt)
        

        db.session.add(action)
        db.session.add(thriller)
        db.session.add(horror)
        db.session.add(mystery)
        db.session.add(fantasy)
        db.session.add(drama)
        db.session.add_all([amq,amw,mr,pt])
        db.session.add_all([inoxRangoli,inoxForum,inoxHighland,inoxRD])

        db.session.add(User(name='admin',email='admin@gmail.com',password=generate_password_hash('admin123', method='sha256'),access=1))
        db.session.commit()


from ..db import db

class Image(db.Model):
    id = db.Column(db.Integer, primary_key=True, autoincrement=True)
    data = db.Column(db.String())
    name = db.Column(db.String(50), unique=True)
    type = db.Column(db.String(20), unique=True)

    def __repr__(self):
        return "<Image File : "+self.name

    with app.app_context():
        db.drop_all()
        db.create_all()

        inoxHighland = Venue(name='Inox Highland Park',description='Again 1 of the Topmost Multiplex in Kolkata. As I am a Movie Buff, watching 4-5 Movies in a month, there is hardly any Good Multiplex or Cinema Hall in Central Kolkata and nearby, where I haven`t been.',location='Dharmatala',city='Kolkata',capacity=320)
        inoxRangoli = Venue(name='Inox Rangoli Mall',description='Again 1 of the Topmost Multiplex in Kolkata. As I am a Movie Buff, watching 4-5 Movies in a month, there is hardly any Good Multiplex or Cinema Hall in Central Kolkata and nearby, where I haven`t been.',location='Belur',city='Howrah',capacity=540)
        inoxForum = Venue(name='Inox Forum Mall',description='Again 1 of the Topmost Multiplex in Kolkata. As I am a Movie Buff, watching 4-5 Movies in a month, there is hardly any Good Multiplex or Cinema Hall in Central Kolkata and nearby, where I haven`t been.',location='Rabindra Sadan',city='Kolkata',capacity=340)
        inoxRD = Venue(name='Inox RD Mall',description='Again 1 of the Topmost Multiplex in Kolkata. As I am a Movie Buff, watching 4-5 Movies in a month, there is hardly any Good Multiplex or Cinema Hall in Central Kolkata and nearby, where I haven`t been.',location='Liluah',city='Howrah',capacity=200)

        db.session.add_all([inoxRangoli,inoxForum,inoxHighland,inoxRD])

        db.session.add(User(name='admin',email='admin@gmail.com',password=generate_password_hash('admin123', method='sha256'),access=1))
        db.session.commit()







<div class="card-body">
              <h5 class="card-title">{{ show['name'] }}</h5>
              <p class="card-text">
                <div class="ratings">
                  {% for i in range(1,6) %}
                    {% if(i <= (show['rating']/2)) %}
                      <i class="fa fa-star rating-color"></i>
                    {% else %}
                      <i class="fa fa-star"></i>
                    {% endif %}
                  {% endfor %}
                </div>
                <!-- <br/>Ticket Price : &nbsp;&#8377;{{ show['ticketPrice'] }}<br/>  -->
                Tags : 
                {% for tagItem in show['tags'] %}
                <span class="badge bg-secondary">{{ tagItem['name'] }}</span>&nbsp;
                {% endfor %}
                </p>
              <a href="#" class="btn btn-primary">Buy Tickets</a>
            </div>

from flask_restful import Resource, fields, marshal_with
from flask import request, jsonify
from datetime import date, timedelta
from models.admin import Venue, Allocation, Show, Venue
from db import db
from validation import NotFoundError, BusinessValidationError
from sqlalchemy import desc

timeslot_output_fields = {
    "date" : fields.String,
    "timeslot" : fields.String,
    "avSeats" : fields.Integer,
    "totSeats" : fields.Integer,
    "price" : fields.Float
}

class TimeSlotAPI(Resource):

    @marshal_with(timeslot_output_fields)
    def get(self):
        showName = request.args.get('show')
        venueName = request.args.get('venue')

        show = db.session.query(Show).filter(Show.name == showName).first()
        venue =db.session.query(Venue).filter(Venue.name == venueName).first()

        slotList = {}

        timeslotList = db.session.query(Allocation.date,Allocation.timeslot,Allocation.avSeats,Allocation.totSeats,Allocation.price).filter(Allocation.venue == venue).filter(Allocation.show == show).filter(Allocation.date > date.today()).filter(Allocation.date < (date.today()+timedelta(days=7))).order_by(Allocation.date,Allocation.timeslot).all()

        if not timeslotList:
            raise NotFoundError(error_message='No timeslot found',status_code=404,error_code="TS001")
        else:
            return timeslotList, 200


    def post(self):
        pass

    def put(self,name):
        pass
    
    def delete(self,name):
        pass